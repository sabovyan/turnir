datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int          @id @default(autoincrement())
  displayName       String
  email             String       @unique
  password          String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  verified          Boolean      @default(false)
  verificationToken String?
  googleId          String?
  facebookId        String?
  tournament        Tournament[]
  players           Player[]
  groups            Group[]
}

model TournamentType {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  tournaments Tournament[]
}

model Tournament {
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  id               Int            @id @default(autoincrement())
  goalsToWin       Int
  name             String
  winningSets      Int?
  sets             Int?
  User             User           @relation(fields: [userId], references: [id])
  userId           Int
  tournamentType   TournamentType @relation(fields: [tournamentTypeId], references: [id])
  tournamentTypeId Int
  rounds           Round[]
  completionStatus Boolean        @default(false)
}

model Round {
  id           Int         @id @default(autoincrement())
  name         String
  games        Game[]
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId Int?
}

model Game {
  id                     Int          @id @default(autoincrement())
  participant1           Participant? @relation("gameOfParticipant1", fields: [participant1Id], references: [id])
  participant1Id         Int?
  participant2           Participant? @relation("gameOfParticipant2", fields: [participant2Id], references: [id])
  participant2Id         Int?
  nextGamePosition       Int
  thirdPlaceGame         Game?        @relation("thirdPlaceGame", fields: [thirdPlaceGameId], references: [id])
  thirdPlaceGameId       Int?
  nextGame               Game?        @relation("nextGame", fields: [nextGameId], references: [id])
  nextGameId             Int?
  ThirdPlaceGame         Game[]       @relation("thirdPlaceGame")
  NextGame               Game[]       @relation("nextGame")
  firstParticipantScore  Int[]
  secondParticipantScore Int[]
  round                  Round?       @relation(fields: [roundId], references: [id])
  roundId                Int?
  isCompleted            Boolean      @default(false)
}

model Participant {
  id                 Int      @id @default(autoincrement())
  name               String
  players            Player[]
  gameOfParticipant1 Game[]   @relation("gameOfParticipant1")
  gameOfParticipant2 Game[]   @relation("gameOfParticipant2")
}

model Player {
  id           Int           @id @default(autoincrement())
  name         String
  User         User          @relation(fields: [userId], references: [id])
  userId       Int
  groups       Group[]
  totalGames   Int?
  totalWins    Int?
  totalPoints  Int?
  participants Participant[]
}

model Group {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  User    User     @relation(fields: [userId], references: [id])
  userId  Int
  players Player[]
}
